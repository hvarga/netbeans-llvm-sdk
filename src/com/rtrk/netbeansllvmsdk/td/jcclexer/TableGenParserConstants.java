/* Generated By:JavaCC: Do not edit this line. TableGenParserConstants.java */
package com.rtrk.netbeansllvmsdk.td.jcclexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TableGenParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 4;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 5;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int BIT = 8;
  /** RegularExpression Id. */
  int BITS = 9;
  /** RegularExpression Id. */
  int CLASS = 10;
  /** RegularExpression Id. */
  int CODE = 11;
  /** RegularExpression Id. */
  int DAG = 12;
  /** RegularExpression Id. */
  int DEF = 13;
  /** RegularExpression Id. */
  int FOREACH = 14;
  /** RegularExpression Id. */
  int DEFM = 15;
  /** RegularExpression Id. */
  int FIELD = 16;
  /** RegularExpression Id. */
  int IN = 17;
  /** RegularExpression Id. */
  int INT = 18;
  /** RegularExpression Id. */
  int LET = 19;
  /** RegularExpression Id. */
  int LIST = 20;
  /** RegularExpression Id. */
  int MULTICLASS = 21;
  /** RegularExpression Id. */
  int STRING = 22;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 23;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 24;
  /** RegularExpression Id. */
  int HEX_LITERAL = 25;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 26;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 27;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 28;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 29;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 30;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 31;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 32;
  /** RegularExpression Id. */
  int STRING_LITERAL = 33;
  /** RegularExpression Id. */
  int IDENTIFIER = 34;
  /** RegularExpression Id. */
  int LETTER = 35;
  /** RegularExpression Id. */
  int PART_LETTER = 36;
  /** RegularExpression Id. */
  int LPAREN = 37;
  /** RegularExpression Id. */
  int RPAREN = 38;
  /** RegularExpression Id. */
  int LBRACE = 39;
  /** RegularExpression Id. */
  int RBRACE = 40;
  /** RegularExpression Id. */
  int LBRACKET = 41;
  /** RegularExpression Id. */
  int RBRACKET = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int DOT = 45;
  /** RegularExpression Id. */
  int ASSIGN = 46;
  /** RegularExpression Id. */
  int LT = 47;
  /** RegularExpression Id. */
  int GT = 48;
  /** RegularExpression Id. */
  int BANG = 49;
  /** RegularExpression Id. */
  int HOOK = 50;
  /** RegularExpression Id. */
  int COLON = 51;
  /** RegularExpression Id. */
  int PLUS = 52;
  /** RegularExpression Id. */
  int MINUS = 53;
  /** RegularExpression Id. */
  int STAR = 54;
  /** RegularExpression Id. */
  int SLASH = 55;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<token of kind 2>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"bit\"",
    "\"bits\"",
    "\"class\"",
    "\"code\"",
    "\"dag\"",
    "\"def\"",
    "\"foreach\"",
    "\"defm\"",
    "\"field\"",
    "\"in\"",
    "\"int\"",
    "\"let\"",
    "\"list\"",
    "\"multiclass\"",
    "\"string\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
  };

}
